{"version":3,"file":"static/js/422.7ae002f4.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","Redux/contacts/selectors.js","components/Filter/Filter.jsx","components/Modal/Modal.styled.jsx","components/EditForm/EditForm.jsx","components/Modal/Modal.jsx","components/ContactItem/ContactItem.jsx","components/hooks/useModal.js","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Field, ErrorMessage } from 'formik';\n\nconst FormContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  border: 1px solid black;\n  padding: 15px;\n`;\n\nconst FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  margin-bottom: 20px;\n`;\nconst FormButton = styled.button`\n  padding: 5px 10px;\n  cursor: pointer;\n  border: 1px solid transparent;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  border-radius: 4px;\n  &:hover,\n  &:focus {\n    background-color: blue;\n  }\n`;\n\nconst FormField = styled(Field)`\n  padding-left: 2px;\n  border: 1px solid teal;\n  &:hover,\n  &:focus {\n    border: 2px solid 234e52;\n  }\n  color: black;\n  background-color: white;\n`;\n\nconst Error = styled(ErrorMessage)`\n  font-size: 12px;\n  color: blue;\n`;\n\nexport { FormContainer, FormLabel, FormButton, FormField, Error };\n","import { Formik, Form } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'Redux/contacts/operations';\nimport { Flex, Box, Button, FormLabel, useColorMode } from '@chakra-ui/react';\nimport { FormField, Error } from './ContactForm.styled';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .required()\n    .matches(\n      \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    ),\n  number: yup\n    .string()\n    .required()\n    .matches(\n      '\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}',\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    ),\n});\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n  const { colorMode } = useColorMode();\n  const handleSubmit = ({ name, number }, { resetForm }) => {\n    dispatch(addContact({ name, number }));\n\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      {props => (\n        <Flex\n          bg={colorMode === 'dark' ? '#234E52' : 'white'}\n          align=\"center\"\n          justify=\"center\"\n        >\n          <Box\n            bg={colorMode === 'dark' ? 'gray.100' : 'white'}\n            p={6}\n            rounded=\"md\"\n            w={64}\n          >\n            <Form autoComplete=\"off\">\n              <FormLabel color=\"black\" htmlFor=\"name\">\n                Name\n                <FormField type=\"text\" name=\"name\" />\n                <Error name=\"name\" component=\"div\" />\n              </FormLabel>\n              <FormLabel color=\"black\" htmlFor=\"number\">\n                Number\n                <FormField type=\"tel\" name=\"number\" />\n                <Error name=\"number\" component=\"div\" />\n              </FormLabel>\n              <Button\n                mt={2}\n                colorScheme=\"teal\"\n                isLoading={props.isSubmitting}\n                type=\"submit\"\n              >\n                Add contact\n              </Button>\n            </Form>\n          </Box>\n        </Flex>\n      )}\n    </Formik>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    if (!filter) return contacts;\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter)\n    );\n  }\n);\n","import { useSelector, useDispatch } from 'react-redux';\nimport { selectFilter } from 'Redux/contacts/selectors';\nimport { setFilter } from 'Redux/contacts/filterSlice';\nimport { Flex, Box, FormLabel, useColorMode, Input } from '@chakra-ui/react';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const { colorMode } = useColorMode();\n  const onChange = event => {\n    const newFilter = event.target.value.toLowerCase();\n    dispatch(setFilter(newFilter));\n  };\n  return (\n    <Flex\n      bg={colorMode === 'dark' ? '#234E52' : 'white'}\n      align=\"center\"\n      justify=\"center\"\n    >\n      <Box\n        bg={colorMode === 'dark' ? 'gray.100' : 'white'}\n        p={6}\n        rounded=\"md\"\n        w={64}\n      >\n        <FormLabel textAlign=\"center\" color=\"black\">\n          Find contacts by name\n          <Input\n            borderColor=\"teal\"\n            pl={2}\n            border=\"1px\"\n            bg=\"white\"\n            color=\"black\"\n            type=\"text\"\n            value={filter}\n            onChange={onChange}\n          />\n        </FormLabel>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #234e52;\n  z-index: 1200;\n`;\nexport const ModalContainer = styled.div`\n  max-width: calc(100vw - 48px);\n  max-height: calc(100vh - 24px);\n`;\n","import { Formik, Form } from 'formik';\nimport PropTypes from 'prop-types';\nimport * as yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { editContact } from 'Redux/contacts/operations';\nimport { FormField, Error } from 'components/ContactForm/ContactForm.styled';\nimport { Flex, Box, Button, FormLabel, useColorMode } from '@chakra-ui/react';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .required()\n    .matches(\n      \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    ),\n  number: yup\n    .string()\n    .required()\n    .matches(\n      '\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}',\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    ),\n});\n\nexport default function EditForm({ contact, onClose }) {\n  const dispatch = useDispatch();\n  const { colorMode } = useColorMode();\n  const onEditContact = ({ id, name, number }) => {\n    dispatch(editContact({ id, name, number }));\n    onClose();\n  };\n  return (\n    <Formik\n      initialValues={{\n        id: contact.id,\n        name: contact.name,\n        number: contact.number,\n      }}\n      validationSchema={schema}\n      onSubmit={onEditContact}\n    >\n      {({ isSubmitting }) => (\n        <Flex\n          bg={colorMode === 'dark' ? '#234E52' : 'white'}\n          align=\"center\"\n          justify=\"center\"\n        >\n          <Box\n            bg={colorMode === 'dark' ? 'gray.100' : 'white'}\n            p={6}\n            rounded=\"md\"\n            w={64}\n          >\n            <Form autoComplete=\"off\">\n              <FormLabel color=\"black\" htmlFor=\"name\">\n                Name\n                <FormField type=\"text\" name=\"name\" />\n                <Error name=\"name\" component=\"div\" />\n              </FormLabel>\n              <FormLabel color=\"black\" htmlFor=\"number\">\n                Number\n                <FormField type=\"tel\" name=\"number\" />\n                <Error name=\"number\" component=\"div\" />\n              </FormLabel>\n              <Button\n                mt={2}\n                colorScheme=\"teal\"\n                // isLoading={props.isSubmitting}\n                type=\"submit\"\n                disabled={isSubmitting}\n              >\n                Save changes\n              </Button>\n            </Form>\n          </Box>\n        </Flex>\n      )}\n    </Formik>\n  );\n}\n\nEditForm.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  onClose: PropTypes.func.isRequired,\n};\n","import { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Overlay, ModalContainer } from './Modal.styled';\nimport { Button } from '@chakra-ui/react';\nimport EditForm from 'components/EditForm/EditForm';\n\nconst Modal = ({ contact, onClose }) => {\n  useEffect(() => {\n    const onKeyDown = e => {\n      if (e.code === 'Escape') {\n        onClose();\n      }\n    };\n\n    window.addEventListener('keydown', onKeyDown);\n    return () => window.removeEventListener('keydown', onKeyDown);\n  }, [onClose]);\n\n  const onBackDropClick = e => {\n    if (e.currentTarget === e.target) {\n      onClose();\n    }\n  };\n\n  return (\n    <Overlay onClick={onBackDropClick}>\n      <ModalContainer>\n        <Button colorScheme=\"teal\" size=\"xs\" type=\"button\" onClick={onClose}>\n          X\n        </Button>\n        <EditForm contact={contact} onClose={onClose} />\n      </ModalContainer>\n    </Overlay>\n  );\n};\n\nModal.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default Modal;\n","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteContact } from 'Redux/contacts/operations';\nimport { ListItem, Text, Button, ButtonGroup } from '@chakra-ui/react';\nimport Modal from 'components/Modal/Modal';\nimport { useModal } from 'components/hooks/useModal';\nexport const Contact = ({ contact }) => {\n  const dispatch = useDispatch();\n  const id = contact.id;\n  const { isModalOpen, closeModal, openModal } = useModal();\n  const onDeleteContact = () => dispatch(deleteContact(contact.id));\n\n  return (\n    <ListItem display=\"flex\" justifyContent=\"space-between\">\n      <Text fontSize={18} fontFamily=\"sans-serif\">\n        {contact.name}: {contact.number}\n      </Text>\n      <ButtonGroup gap=\"4\">\n        <Button colorScheme=\"teal\" size=\"xs\" type=\"button\" onClick={openModal}>\n          Edit\n        </Button>\n        {isModalOpen && (\n          <Modal onClose={closeModal} id={id} contact={contact} />\n        )}\n\n        <Button\n          colorScheme=\"teal\"\n          size=\"xs\"\n          type=\"button\"\n          onClick={onDeleteContact}\n        >\n          Delete\n        </Button>\n      </ButtonGroup>\n    </ListItem>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","import { useState } from 'react';\n\nexport const useModal = (initialState = false) => {\n  const [isModalOpen, setIsModalOpen] = useState(initialState);\n  const openModal = () => setIsModalOpen(true);\n  const closeModal = () => setIsModalOpen(false);\n  return { isModalOpen, openModal, closeModal };\n};\n","import { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { selectFilteredContacts } from 'Redux/contacts/selectors';\nimport { Contact } from 'components/ContactItem/ContactItem';\nimport { UnorderedList, useColorMode } from '@chakra-ui/react';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectFilteredContacts);\n  const { colorMode } = useColorMode();\n  return (\n    <UnorderedList\n      textAlign=\"center\"\n      m={0}\n      bg={colorMode === 'dark' ? '#234E52' : 'white'}\n    >\n      {contacts.map(contact => (\n        <Contact key={contact.id} contact={contact} />\n      ))}\n    </UnorderedList>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\nexport default ContactList;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\nimport { Container, Heading, useColorMode } from '@chakra-ui/react';\nimport { fetchContacts } from 'Redux/contacts/operations';\nimport { selectError, selectIsLoading } from 'Redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const { colorMode } = useColorMode();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container p={10}>\n      <Heading\n        as=\"h2\"\n        size=\"lg\"\n        textAlign=\"center\"\n        fontSize=\"20px\"\n        color={colorMode === 'dark' ? 'white' : 'black'}\n      >\n        Phonebook\n      </Heading>\n      <ContactForm />\n      <Heading\n        as=\"h2\"\n        size=\"lg\"\n        textAlign=\"center\"\n        fontSize=\"20px\"\n        color={colorMode === 'dark' ? 'white' : 'black'}\n      >\n        Contacts\n      </Heading>\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactList />\n    </Container>\n  );\n}\n"],"names":["FormField","styled","Field","Error","ErrorMessage","schema","yup","shape","name","required","matches","number","ContactForm","dispatch","useDispatch","colorMode","useColorMode","initialValues","validationSchema","onSubmit","resetForm","addContact","props","bg","align","justify","p","rounded","w","autoComplete","color","htmlFor","type","component","mt","colorScheme","isLoading","isSubmitting","selectIsLoading","state","contacts","selectError","error","selectFilter","filter","selectFilteredContacts","createSelector","items","contact","toLowerCase","includes","useSelector","textAlign","I","borderColor","pl","border","value","onChange","event","newFilter","target","setFilter","Overlay","ModalContainer","EditForm","onClose","id","editContact","disabled","useEffect","onKeyDown","e","code","window","addEventListener","removeEventListener","onClick","currentTarget","size","Contact","initialState","useState","isModalOpen","setIsModalOpen","openModal","closeModal","useModal","display","justifyContent","fontSize","fontFamily","gap","deleteContact","m","map","Contacts","fetchContacts","as"],"sourceRoot":""}